import tkinter as tk
from tkinter import messagebox
import math

class TicTacToe:
    def __init__(self):
        self.window = tk.Tk()
        self.window.title("Tic-Tac-Toe")
        self.board = [" " for _ in range(9)]
        self.current_player = "X"

        # Create buttons with color
        self.buttons = [
            tk.Button(self.window, text=" ", font=('normal', 20), width=8, height=3, command=lambda i=i: self.click(i), bg="sky blue")
            for i in range(9)
        ]

        # Grid buttons
        for i in range(3):
            for j in range(3):
                self.buttons[i * 3 + j].grid(row=i, column=j)

    def click(self, i):
        if self.board[i] == " ":
            self.board[i] = self.current_player
            self.buttons[i].config(text=self.current_player, bg="pink", state=tk.DISABLED)  

        winner = self.check_winner()
        if winner:
            if winner == "draw":
                messagebox.showinfo("Tic-Tac-Toe", "It's a draw!")
            else:
                messagebox.showinfo("Tic-Tac-Toe", f"Player {self.current_player} wins!")
            self.reset_board()
        else:
            self.current_player = "O" if self.current_player == "X" else "X"
            if self.current_player == "O":
                self.ai_move()

    def ai_move(self):
        best_score = -math.inf
        best_move = None

        for i in range(9):
            if self.board[i] == " ":
                self.board[i] = "O"
                score = self.minimax(self.board, 0, False)
                self.board[i] = " "
                if score > best_score:
                    best_score = score
                    best_move = i

        self.click(best_move)

    def minimax(self, board, depth, is_maximizing):
        scores = {"X": -1, "O": 1, "draw": 0}

        result = self.check_winner()
        if result is not None:
            return scores[result]

        if is_maximizing:
            best_score = -math.inf
            for i in range(9):
                if board[i] == " ":
                    board[i] = "O"
                    score = self.minimax(board, depth + 1, False)
                    board[i] = " "
                    best_score = max(score, best_score)
            return best_score
        else:
            best_score = math.inf
            for i in range(9):
                if board[i] == " ":
                    board[i] = "X"
                    score = self.minimax(board, depth + 1, True)
                    board[i] = " "
                    best_score = min(score, best_score)
            return best_score

    def check_winner(self):
        for i in range(3):
            if self.board[i * 3] == self.board[i * 3 + 1] == self.board[i * 3 + 2] != " ":
                return self.board[i * 3]
            if self.board[i] == self.board[i + 3] == self.board[i + 6] != " ":
                return self.board[i]
        if self.board[0] == self.board[4] == self.board[8] != " ":
            return self.board[0]
        if self.board[2] == self.board[4] == self.board[6] != " ":
            return self.board[2]

        if " " not in self.board:
            return "draw"

        return None

    def reset_board(self):
        self.board = [" " for _ in range(9)]
        for button in self.buttons:
            button.config(text=" ", bg="sky blue", state=tk.NORMAL)  
        self.current_player = "X"

    def run(self):
        self.window.mainloop()

if __name__ == "__main__":
    game = TicTacToe()
    game.run()
